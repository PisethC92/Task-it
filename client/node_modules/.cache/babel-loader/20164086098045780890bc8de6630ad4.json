{"ast":null,"code":"var _jsxFileName = \"D:\\\\Courses\\\\CS 361\\\\assignment_5\\\\TaskIt\\\\client\\\\src\\\\components\\\\edit.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport \"./edit.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Edit() {\n  _s();\n  const [form, setForm] = useState({\n    title: \"\",\n    description: \"\",\n    records: []\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:5000/record/${params.id.toString()}`);\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const record = await response.json();\n      if (!record) {\n        window.alert(`Record with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n      setForm(record);\n    }\n    fetchData();\n    return;\n  }, [params.id, navigate]);\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm(prev => {\n      return {\n        ...prev,\n        ...value\n      };\n    });\n  }\n  async function onSubmit(e) {\n    e.preventDefault();\n    const editedPerson = {\n      title: form.title,\n      description: form.description\n    };\n\n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:5000/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedPerson),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    navigate(\"/recordList\");\n  }\n\n  // This following section will display the form that takes input from the user to update the data.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Update Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Title: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: \"title\",\n          value: form.title,\n          onChange: e => updateForm({\n            title: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: \"description\",\n          value: form.description,\n          onChange: e => updateForm({\n            description: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Update Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: () => navigate(\"/recordList\"),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(Edit, \"6F43UK1NJSWOKXcxPrEvNs2JPqc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Edit;\nvar _c;\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Edit","form","setForm","title","description","records","params","navigate","fetchData","id","toString","response","fetch","ok","message","statusText","window","alert","record","json","updateForm","value","prev","onSubmit","e","preventDefault","editedPerson","method","body","JSON","stringify","headers","target"],"sources":["D:/Courses/CS 361/assignment_5/TaskIt/client/src/components/edit.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport \"./edit.css\"\n\nexport default function Edit() {\n  const [form, setForm] = useState({\n    title: \"\",\n    description: \"\",\n    records: [],\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:5000/record/${params.id.toString()}`);\n\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const record = await response.json();\n      if (!record) {\n        window.alert(`Record with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n\n      setForm(record);\n    }\n\n    fetchData();\n\n    return;\n  }, [params.id, navigate]);\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    const editedPerson = {\n      title: form.title,\n      description: form.description,\n    };\n\n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:5000/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedPerson),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n\n    navigate(\"/recordList\");\n  }\n\n  // This following section will display the form that takes input from the user to update the data.\n  return (\n    <div>\n      <h3>Update Record</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"title\"\n            value={form.title}\n            onChange={(e) => updateForm({ title: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"description\">Description: </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"description\"\n            value={form.description}\n            onChange={(e) => updateForm({ description: e.target.value })}\n          />\n        </div>\n        <br />\n\n        <div className=\"form-group buttons\">\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Update Task\n          </button>\n          <button\n            className=\"btn btn-secondary\"\n            onClick={() => navigate(\"/recordList\")}\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}